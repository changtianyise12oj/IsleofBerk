package com.GACMD.isleofberk.init.init;

import com.GACMD.isleofberk.IsleofBerk;
import com.GACMD.isleofberk.common.blocks.DragonSoulFire;
import net.minecraft.client.renderer.ItemBlockRenderTypes;
import net.minecraft.client.renderer.RenderType;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.item.BlockItem;
import net.minecraft.world.item.CreativeModeTab;
import net.minecraft.world.item.Item;
import net.minecraft.world.level.BlockGetter;
import net.minecraft.world.level.block.*;
import net.minecraft.world.level.block.grower.OakTreeGrower;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.material.Material;
import net.minecraft.world.level.material.MaterialColor;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;
import net.minecraftforge.registries.RegistryObject;

import java.util.function.Supplier;

import static com.GACMD.isleofberk.registery.ModTab.IOB_BLOCKS;
import static net.minecraft.world.effect.MobEffects.MOVEMENT_SPEED;
import static net.minecraft.world.effect.MobEffects.POISON;

public class BlockInit {
	public static final DeferredRegister<Block> BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, IsleofBerk.MOD_ID);

	public static final RegistryObject<Block> DRAGON_SOUL_FIRE = registerBlock("dragon_soul_fire", () ->
			new DragonSoulFire(BlockBehaviour.Properties.of(Material.FIRE,
					MaterialColor.COLOR_LIGHT_BLUE).noCollission().instabreak().lightLevel((p_50884_) -> 10).sound(SoundType.WOOL)), null);

	public static final RegistryObject<Block> BELZIUM_BLOCK = registerBlock("belzium_block", () ->
			new Block(BlockBehaviour.Properties.of(Material.METAL)), IOB_BLOCKS);
	public static final RegistryObject<Block> BELZIUM_ORE = registerBlock("belzium_ore", () ->
			new Block(BlockBehaviour.Properties.of(Material.STONE)), IOB_BLOCKS);
	public static final RegistryObject<Block> BERK_PORTAL_STONE = registerBlock("berk_portal_stone", () ->
			new Block(BlockBehaviour.Properties.of(Material.STONE)), IOB_BLOCKS);

	// PLEASE ASSIGN PROPER POTION EFFECTS AND LENGTHS, I JUST CHOSE SOMETHING RANDOM
	public static final RegistryObject<Block> BLUE_OLEANDER = registerBlock("blue_oleander", () ->
			new FlowerBlock(POISON, 10, BlockBehaviour.Properties.of(Material.PLANT).dynamicShape().noCollission().instabreak().sound(SoundType.GRASS)), IOB_BLOCKS);
	public static final RegistryObject<Block> DRAGON_NIP_GRASS = registerBlock("dragon_nip_grass", () ->
			new FlowerBlock(MOVEMENT_SPEED, 10, BlockBehaviour.Properties.of(Material.PLANT).dynamicShape().noCollission().instabreak().sound(SoundType.GRASS)), IOB_BLOCKS);
	public static final RegistryObject<Block> DRAGONBERRY_BLOCK = registerBlock("dragonberry_block", () ->
			new Block(BlockBehaviour.Properties.of(Material.LEAVES)), IOB_BLOCKS);

	// IS CROPBLOCK CORRECT?
	public static final RegistryObject<Block> DRAGONBERRY_BUSH = registerBlock("dragonberry_bush", () ->
			new BushBlock(BlockBehaviour.Properties.of(Material.PLANT)), IOB_BLOCKS);
	public static final RegistryObject<Block> DRAGONDIRT = registerBlock("dragondirt", () ->
			new Block(BlockBehaviour.Properties.of(Material.DIRT).sound(SoundType.GRAVEL)), IOB_BLOCKS);
	public static final RegistryObject<Block> DRAGONGRASS = registerBlock("dragongrass", () ->
			new GrassBlock(BlockBehaviour.Properties.of(Material.GRASS).strength(0.6F).sound(SoundType.GRASS)), IOB_BLOCKS);
	public static final RegistryObject<Block> FOREVERWING_DOOR = registerBlock("foreverwing_door", () ->
			new DoorBlock(BlockBehaviour.Properties.of(Material.WOOD).sound(SoundType.WOOD)), IOB_BLOCKS);
	public static final RegistryObject<Block> FOREVERWING_LEAVES = registerBlock("foreverwing_leaves", () ->
			leaves(SoundType.GRASS), IOB_BLOCKS);
	public static final RegistryObject<Block> FOREVERWING_LOG = registerBlock("foreverwing_log", () ->
			log(MaterialColor.WOOD, MaterialColor.PODZOL), IOB_BLOCKS);
	public static final RegistryObject<Block> FOREVERWING_PLANKS = registerBlock("foreverwing_planks", () ->
			new Block(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F, 3.0F).sound(SoundType.WOOD)), IOB_BLOCKS);
	public static final RegistryObject<Block> FOREVERWING_PRESSURE_PLATE = registerBlock("foreverwing_pressure_plate", () ->
			new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.of(Material.WOOD,
					FOREVERWING_PLANKS.get().defaultMaterialColor()).noCollission().strength(0.5F).sound(SoundType.WOOD)), IOB_BLOCKS);

	/////////////////////////////////////////
	//TODO: Implement Foreverwing Tree Grower
	public static final RegistryObject<Block> FOREVERWING_SAPLING = registerBlock("foreverwing_sapling", () ->
			new SaplingBlock(new OakTreeGrower(), BlockBehaviour.Properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS)), IOB_BLOCKS);
	public static final RegistryObject<Block> FOREVERWING_TRAPDOOR = registerBlock("foreverwing_trapdoor", () ->
			new TrapDoorBlock(BlockBehaviour.Properties.of(Material.WOOD).noOcclusion().sound(SoundType.WOOD)), IOB_BLOCKS);
	public static final RegistryObject<Block> FOREVERWING_WOOD = registerBlock("foreverwing_wood", () ->
			new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)), IOB_BLOCKS);
	public static final RegistryObject<Block> GRONCKLE_IRON_BLOCK = registerBlock("gronckle_iron_block", () ->
			new Block(BlockBehaviour.Properties.of(Material.METAL).requiresCorrectToolForDrops().strength(3.0F, 3.0F).sound(SoundType.METAL)), IOB_BLOCKS);
	public static final RegistryObject<Block> LIGHTFURY_EGG = registerBlock("lightfury_egg", () -> //TODO: fix broken rendering (adjacent blockfaces dont get rendered)
			new Block(BlockBehaviour.Properties.of(Material.EGG).noDrops()), IOB_BLOCKS);
	public static final RegistryObject<Block> LOKI_BUTTON = registerBlock("loki_button", () ->
			new WoodButtonBlock(BlockBehaviour.Properties.of(Material.WOOD).noCollission().strength(0.5F).sound(SoundType.WOOD)), IOB_BLOCKS);
	public static final RegistryObject<Block> LOKI_DOOR = registerBlock("loki_door", () ->
			new DoorBlock(BlockBehaviour.Properties.of(Material.WOOD).sound(SoundType.WOOD)), IOB_BLOCKS);
	public static final RegistryObject<Block> LOKI_PLANKS = registerBlock("loki_planks", () ->
			new Block(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F, 3.0F).sound(SoundType.WOOD)), IOB_BLOCKS);
	public static final RegistryObject<Block> LOKI_FENCE = registerBlock("loki_fence", () ->
			new FenceBlock(BlockBehaviour.Properties.of(Material.WOOD, LOKI_PLANKS.get().defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD)), IOB_BLOCKS);
	public static final RegistryObject<Block> LOKI_FENCE_GATE = registerBlock("loki_fence_gate", () ->
			new FenceGateBlock(BlockBehaviour.Properties.of(Material.WOOD, LOKI_PLANKS.get().defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD)), IOB_BLOCKS);
	public static final RegistryObject<Block> LOKI_LOG = registerBlock("loki_log", () ->
			log(MaterialColor.WOOD, MaterialColor.PODZOL), IOB_BLOCKS);
	public static final RegistryObject<Block> LOKI_PRESSURE_PLATE = registerBlock("loki_pressure_plate", () ->
			new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.of(Material.WOOD,
					LOKI_PLANKS.get().defaultMaterialColor()).noCollission().strength(0.5F).sound(SoundType.WOOD)), IOB_BLOCKS);
	public static final RegistryObject<Block> LOKI_SAPLING = registerBlock("loki_sapling", () -> //TODO: Add Tree Grower for Loki
			new SaplingBlock(new OakTreeGrower(), BlockBehaviour.Properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS)), IOB_BLOCKS);
	public static final RegistryObject<Block> LOKI_SLAB = registerBlock("loki_slab", () ->
			new SlabBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F, 3.0F).sound(SoundType.WOOD)), IOB_BLOCKS);
	public static final RegistryObject<Block> LOKI_STAIRS = registerBlock("loki_stairs", () ->
			new StairBlock(() -> LOKI_PLANKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(LOKI_PLANKS.get())), IOB_BLOCKS);
	public static final RegistryObject<Block> LOKI_TRAPDOOR = registerBlock("loki_trapdoor", () ->
			new TrapDoorBlock(BlockBehaviour.Properties.of(Material.WOOD).noOcclusion().sound(SoundType.WOOD)), IOB_BLOCKS);
	public static final RegistryObject<Block> LOKI_WOOD = registerBlock("loki_wood", () ->
			new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)), IOB_BLOCKS);
	public static final RegistryObject<Block> ODIN_GEM_BLOCK = registerBlock("odin_gem_block", () ->
			new Block(BlockBehaviour.Properties.of(Material.METAL).sound(SoundType.AMETHYST)), IOB_BLOCKS);
	public static final RegistryObject<Block> ODIN_GEM_ORE = registerBlock("odin_gem_ore", () ->
			new Block(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops()), IOB_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_FOREVERWING_LOG = registerBlock("stripped_foreverwing_log", () ->
			log(MaterialColor.WOOD, MaterialColor.PODZOL), IOB_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_LOKI_LOG = registerBlock("stripped_loki_log", () ->
			log(MaterialColor.WOOD, MaterialColor.PODZOL), IOB_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_LOKI_WOOD = registerBlock("stripped_loki_wood", () ->
			new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)), IOB_BLOCKS);
	public static final RegistryObject<Block> STRIPPED_FOREVERWING_WOOD = registerBlock("stripped_foreverwing_wood", () ->
			new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)), IOB_BLOCKS);
	public static final RegistryObject<Block> THOR_ORE = registerBlock("thor_ore", () ->
			new Block(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops()), IOB_BLOCKS);

	private static <T extends Block> RegistryObject<T> registerBlock(String blockName, Supplier<T> block, CreativeModeTab tab) {
		RegistryObject<T> returnValue = BLOCKS.register(blockName, block);
		registerBlockItem(blockName, returnValue, tab);
		return returnValue;
	}

	private static <T extends Block> RegistryObject<Item> registerBlockItem(String blockName, RegistryObject<T> block, CreativeModeTab tab) {
		return ItemInit.ITEMS.register(blockName, () -> new BlockItem(block.get(), new Item.Properties().tab(tab)));
	}

	private static Boolean ocelotOrParrot(BlockState blockState, BlockGetter blockGetter, BlockPos blockPos, EntityType<?> entityType) {
		return entityType == EntityType.OCELOT || entityType == EntityType.PARROT;
	}

	private static LeavesBlock leaves(SoundType soundType) {
		return new LeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES)
				.strength(0.2F).randomTicks().sound(soundType).noOcclusion().isValidSpawn(BlockInit::ocelotOrParrot).isSuffocating(BlockInit::never).isViewBlocking(BlockInit::never));
	}

	private static boolean never(BlockState blockState, BlockGetter blockGetter, BlockPos blockPos) {
		return false;
	}

	private static RotatedPillarBlock log(MaterialColor pTopColor, MaterialColor pBarkColor) {
		return new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.WOOD, (p_152624_) -> {
			return p_152624_.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? pTopColor : pBarkColor;
		}).strength(2.0F).sound(SoundType.WOOD));
	}

	public static void doBlockSetup() {
		// Make Translucent Blocks
		ItemBlockRenderTypes.setRenderLayer(BLUE_OLEANDER.get(), RenderType.translucent());
		ItemBlockRenderTypes.setRenderLayer(DRAGON_NIP_GRASS.get(), RenderType.translucent());
		ItemBlockRenderTypes.setRenderLayer(FOREVERWING_SAPLING.get(), RenderType.translucent());
		ItemBlockRenderTypes.setRenderLayer(DRAGON_SOUL_FIRE.get(), RenderType.translucent());
		ItemBlockRenderTypes.setRenderLayer(LOKI_SAPLING.get(), RenderType.translucent());

		// Make Cutout Blocks
		ItemBlockRenderTypes.setRenderLayer(FOREVERWING_DOOR.get(), RenderType.cutout());
		ItemBlockRenderTypes.setRenderLayer(FOREVERWING_TRAPDOOR.get(), RenderType.cutout());
		ItemBlockRenderTypes.setRenderLayer(LOKI_DOOR.get(), RenderType.cutout());
		ItemBlockRenderTypes.setRenderLayer(LOKI_TRAPDOOR.get(), RenderType.cutout());
	}
}
