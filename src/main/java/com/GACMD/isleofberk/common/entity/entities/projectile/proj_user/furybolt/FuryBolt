package com.GACMD.isleofberk.common.entity.entities.projectile.furybolt;

import com.GACMD.isleofberk.common.entity.entities.base.ADragonBase;
import com.GACMD.isleofberk.common.entity.entities.dragons.nightfury.NightFury;
import com.GACMD.isleofberk.common.entity.entities.projectile.ParticleRegistrar;
import com.GACMD.isleofberk.common.blocks.DragonSoulFire;
import com.GACMD.isleofberk.registery.ModEntities;
import com.google.common.collect.Sets;
import com.mojang.datafixers.util.Pair;
import it.unimi.dsi.fastutil.objects.ObjectArrayList;
import net.minecraft.core.BlockPos;
import net.minecraft.core.particles.ParticleOptions;
import net.minecraft.core.particles.ParticleTypes;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.sounds.SoundEvents;
import net.minecraft.sounds.SoundSource;
import net.minecraft.util.Mth;
import net.minecraft.world.damagesource.DamageSource;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.entity.item.PrimedTnt;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.entity.projectile.AbstractHurtingProjectile;
import net.minecraft.world.entity.projectile.ProjectileUtil;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.enchantment.ProtectionEnchantment;
import net.minecraft.world.level.Explosion;
import net.minecraft.world.level.ExplosionDamageCalculator;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.BaseFireBlock;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.gameevent.GameEvent;
import net.minecraft.world.level.material.FluidState;
import net.minecraft.world.level.storage.loot.LootContext;
import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
import net.minecraft.world.phys.*;
import org.jetbrains.annotations.NotNull;
import software.bernie.geckolib3.core.IAnimatable;
import software.bernie.geckolib3.core.PlayState;
import software.bernie.geckolib3.core.builder.AnimationBuilder;
import software.bernie.geckolib3.core.controller.AnimationController;
import software.bernie.geckolib3.core.event.predicate.AnimationEvent;
import software.bernie.geckolib3.core.manager.AnimationData;
import software.bernie.geckolib3.core.manager.AnimationFactory;

import javax.annotation.Nullable;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.Set;

public class FuryBolt extends AbstractHurtingProjectile implements IAnimatable {

    AnimationFactory factory = new AnimationFactory(this);
    public NightFuryEntity furyEntity;
    public double ticksExisted;
    int strengthRadius;

    /**
     * registry constructor
     *
     * @param type
     * @param level
     */
    public FuryBolt(EntityType<? extends FuryBolt> type, Level level) {
        super(type, level);
    }

    public FuryBolt(NightFuryEntity owner, Vec3 throat, Vec3 end, Level level, int strengthRadius) {
        this(EntityInit.FURY_BOLT.get(), level);
        this.furyEntity = owner;
        this.strengthRadius = strengthRadius;
        this.setOwner(owner);
        this.moveTo(throat.x(), throat.y(), throat.z(), this.getYRot(), this.getXRot());
        this.reapplyPosition();
        double d0 = Math.sqrt(end.x() * end.x() + end.y() * end.y() + end.z() * end.z());
        if (d0 != 0.0D) {
            this.xPower = end.x() / d0 * 0.10D; // 0.30D
            this.yPower = end.y() / d0 * 0.10D; // 0.30D
            this.zPower = end.z() / d0 * 0.10D; // 0.30D
        }
    }

    private <E extends IAnimatable> PlayState predicate(AnimationEvent<E> event) {
        event.getController().setAnimation(new AnimationBuilder().addAnimation("animation.projectile.spin", true));
        return PlayState.CONTINUE;
    }

    @Override
    public void registerControllers(AnimationData data) {
        data.addAnimationController(new AnimationController<>(this, "fury_bolt", 0, this::predicate));
    }

    @Override
    public AnimationFactory getFactory() {
        return factory;
    }


    @Override
    public void tick() {
        // super.tick() causes fireball textures
        Entity entity = this.getOwner();
        if (this.level.isClientSide || (entity == null || !entity.isRemoved())) {
            HitResult hitresult = ProjectileUtil.getHitResult(this, this::canHitEntity);
            if (hitresult.getType() != HitResult.Type.MISS && !net.minecraftforge.event.ForgeEventFactory.onProjectileImpact(this, hitresult)) {
                this.onHit(hitresult);
            }

            this.checkInsideBlocks();
            Vec3 vec3 = this.getDeltaMovement();
            double d0 = this.getX() + vec3.x;
            double d1 = this.getY() + vec3.y;
            double d2 = this.getZ() + vec3.z;
            float f = this.getInertia();
            if (this.isInWater()) {
                for (int i = 0; i < 4; ++i) {
                    this.level.addParticle(ParticleTypes.BUBBLE, d0 - vec3.x * 0.25D, d1 - vec3.y * 0.25D, d2 - vec3.z * 0.25D, vec3.x, vec3.y, vec3.z);
                }

                f = 0.8F;

            }

//            playParticles();
            this.setDeltaMovement(vec3.add(this.xPower, this.yPower, this.zPower).scale(f));
            this.setPos(d0, d1, d2);
        }
//        if (this.ticksExisted > 1)
        playParticles();
        // kill entity when ticks exceed 250 to remove lag
        ticksExisted++;
        if (ticksExisted > 75) {
            this.discard();
            ticksExisted = 0;
        }
    }

    public void playParticles() {
        for (int i = 0; i < 1; i++) {
            Vec3 vec3 = this.getDeltaMovement();
            double deltaX = vec3.x;
            double deltaY = vec3.y;
            double deltaZ = vec3.z;
            double dist = Math.ceil(Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 6);
            for (double j = 0; j < dist; j++) {
                double coeff = j / dist;
                level.addParticle(getTrailParticle(), true,
                        (float) (xo + deltaX * coeff),
                        (float) (yo + deltaY * coeff) + 0.1,
                        (float) (zo + deltaZ * coeff),
                        0.0225f * (random.nextFloat() - 0.5f),
                        0.0225f * (random.nextFloat() - 0.5f),
                        0.0225f * (random.nextFloat() - 0.5f));
            }
        }
    }

    /**
     * Similar to setArrowHeading, it's point the throwable entity to a x, y, z direction.
     */
    public void shoot(Vec3 end, float pVelocity, float pInaccuracy, float partialTicks) {
        if (partialTicks == 1) {
            Vec3 endVec = (new Vec3(end.x() * 5, end.y() * 5, end.z() * 5));
            this.setDeltaMovement(endVec);
            double d0 = end.horizontalDistance();
            this.setYRot((float) (Mth.atan2(end.x, end.z) * (double) (180F / (float) Math.PI)));
            this.setXRot((float) (Mth.atan2(end.y, d0) * (double) (180F / (float) Math.PI)));
            this.yRotO = this.getYRot();
            this.xRotO = this.getYRot();
        }
    }
//    /**
//     * Similar to setArrowHeading, it's point the throwable entity to a x, y, z direction.
//     */
//    public void shoot(Vec3 end, float pVelocity, float pInaccuracy, float partialTicks) {
//        if (partialTicks == 1) {
//            Vec3 endVec = (new Vec3(end.x() * 4.8, end.y() * 4.8, end.z() * 4.8));
//            this.setDeltaMovement(endVec);
//            double d0 = end.horizontalDistance();
//            this.setYRot((float) (Mth.atan2(end.x, end.z) * (double) (180F / (float) Math.PI)));
//            this.setXRot((float) (Mth.atan2(end.y, d0) * (double) (180F / (float) Math.PI)));
//            this.yRotO = this.getYRot();
//            this.xRotO = this.getYRot();
//        }
//    }

    @Override
    protected ParticleOptions getTrailParticle() {
        return ParticleRegistrar.FURY_DUST.get();
    }

    /**
     * Called when this EntityFireball hits a block or entity.
     */
    protected void onHit(@NotNull HitResult pResult) {
        if (!this.level.isClientSide) {
            HitResult.Type hitresult$type = pResult.getType();
            if (hitresult$type == HitResult.Type.ENTITY) {
                this.onHitEntity((EntityHitResult) pResult);
            } else if (hitresult$type == HitResult.Type.BLOCK) {
                this.onHitBlock((BlockHitResult) pResult);
            }

            if (hitresult$type != HitResult.Type.MISS) {
                this.gameEvent(GameEvent.PROJECTILE_LAND, this.getOwner());
            }
            boolean flag = net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this.level, this.getOwner());
            this.explode(null, this.getX(), this.getY(), this.getZ(), strengthRadius, flag, flag ? Explosion.BlockInteraction.DESTROY : Explosion.BlockInteraction.NONE);
            this.discard();
        }

    }

    @org.jetbrains.annotations.Nullable
    @Override
    public ADragonBase getOwner() {
        return furyEntity;
    }

    /**
     * Called when the arrow hits an entity
     */
    protected void onHitEntity(@NotNull EntityHitResult pResult) {
        super.onHitEntity(pResult);
        if (!this.level.isClientSide) {
            Entity entity = pResult.getEntity();
            Entity owner = this.getOwner();
            entity.hurt(DamageSource.explosion(this.furyEntity), getDamage(furyEntity));
//            if (owner instanceof LivingEntity && !(owner instanceof ADragonBase) && owner != entity) {
//                this.doEnchantDamageEffects((LivingEntity) owner, entity);
//            }
        }
    }

    private int getDamage(NightFuryEntity furyEntity) {
        if (furyEntity.tier1()) {
            return 2;
        } else if (furyEntity.tier2()) {
            return 10;
        } else if (furyEntity.tier3()) {
            return 15;
        } else if (furyEntity.tier4()) {
            return 22;
        }
        return 2;
    }

    @Override
    protected boolean canHitEntity(@NotNull Entity p_36842_) {
        return super.canHitEntity(p_36842_) && p_36842_ != this.getOwner(); //  && p_36842_ instanceof ADragonBase
    }


    @Override
    public boolean isNoGravity() {
        return true;
    }

    @Override
    public float getBrightness() {
        return 0;
    }

    /**
     * Custom Explosion method used for making explosions with DragonSoulFire.
     *
     * @return The Explosion Object
     * @see com.GACMD.isleofberk.common.blocks.DragonSoulFire
     * @see net.minecraft.world.level.Explosion
     * @see Explosion#explode()
     */
    public FuryBoltExplosion explode(@Nullable Entity pEntity, double pX, double pY, double pZ, float pExplosionRadius, boolean pCausesFire, Explosion.BlockInteraction pMode) {
        return this.explode(pEntity, null, null, pX, pY, pZ, pExplosionRadius, pCausesFire, pMode);
    }


    private FuryBoltExplosion explode(@Nullable Entity pExploder, @Nullable DamageSource pDamageSource, @Nullable ExplosionDamageCalculator pContext, double pX, double pY, double pZ, float pSize, boolean pCausesFire, Explosion.BlockInteraction pMode) {
        // Fire is always disabled in the Explosion constructor, to avoid the placement of regular fire
        // we have a custom way of placing fire.
        FuryBoltExplosion explosion = new FuryBoltExplosion(this.level, pExploder, pDamageSource, pContext, pX, pY, pZ, pSize, false, pMode);
        if (net.minecraftforge.event.ForgeEventFactory.onExplosionStart(this.level, explosion)) return explosion;
        explosion.explode();
        explosion.finalizeExplosion(true);
        if (pCausesFire) { // Place DragonSoulFire if fire is enabled.
            explosion.nightFuryFire(this.level);
        }
        return explosion;
    }

    private static class FuryBoltExplosion extends Explosion {
        public FuryBoltExplosion(Level pLevel, @Nullable Entity pSource, @Nullable DamageSource pDamageSource, @Nullable ExplosionDamageCalculator pDamageCalculator,
                                 double pToBlowX, double pToBlowY, double pToBlowZ, float pRadius, boolean pFire, Explosion.BlockInteraction pBlockInteraction) {
            super(pLevel, pSource, pDamageSource, pDamageCalculator, pToBlowX, pToBlowY, pToBlowZ, pRadius, pFire, pBlockInteraction);
        }


        /**
         * Does the first part of the explosion (destroy blocks)
         */
        public void explode() {
            this.level.gameEvent(this.source, GameEvent.EXPLODE, new BlockPos(this.x, this.y, this.z));
            Set<BlockPos> set = Sets.newHashSet();
            int i = 16;

            for (int j = 0; j < 16; ++j) {
                for (int k = 0; k < 16; ++k) {
                    for (int l = 0; l < 16; ++l) {
                        if (j == 0 || j == 15 || k == 0 || k == 15 || l == 0 || l == 15) {
                            double d0 = ((float) j / 15.0F * 2.0F - 1.0F);
                            double d1 = ((float) k / 15.0F * 2.0F - 1.0F);
                            double d2 = ((float) l / 15.0F * 2.0F - 1.0F);
                            double d3 = Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
                            d0 /= d3;
                            d1 /= d3;
                            d2 /= d3;
                            float f = this.radius * (0.7F + this.level.random.nextFloat() * 0.6F); // weaken fury explosion by / 2
                            double d4 = this.x;
                            double d6 = this.y;
                            double d8 = this.z;

                            for (float f1 = 0.3F; f > 0.0F; f -= 0.22500001F) {
                                BlockPos blockpos = new BlockPos(d4, d6, d8);
                                BlockState blockstate = this.level.getBlockState(blockpos);
                                FluidState fluidstate = this.level.getFluidState(blockpos);
                                if (!this.level.isInWorldBounds(blockpos)) {
                                    break;
                                }

                                Optional<Float> optional = this.damageCalculator.getBlockExplosionResistance(this, this.level, blockpos, blockstate, fluidstate);
                                if (optional.isPresent()) {
                                    f -= (optional.get() + 0.3F) * 0.3F;
                                }

                                if (f > 0.0F && this.damageCalculator.shouldBlockExplode(this, this.level, blockpos, blockstate, f)) {
                                    set.add(blockpos);
                                }

                                d4 += d0 * (double) 0.3F;
                                d6 += d1 * (double) 0.3F;
                                d8 += d2 * (double) 0.3F;
                            }
                        }
                    }
                }
            }

            this.toBlow.addAll(set);
            float f2 = this.radius * 2.0F;
            int k1 = Mth.floor(this.x - (double) f2 - 1.0D);
            int l1 = Mth.floor(this.x + (double) f2 + 1.0D);
            int i2 = Mth.floor(this.y - (double) f2 - 1.0D);
            int i1 = Mth.floor(this.y + (double) f2 + 1.0D);
            int j2 = Mth.floor(this.z - (double) f2 - 1.0D);
            int j1 = Mth.floor(this.z + (double) f2 + 1.0D);
            List<Entity> list = this.level.getEntities(this.source, new AABB((double) k1, (double) i2, (double) j2, (double) l1, (double) i1, (double) j1));
            net.minecraftforge.event.ForgeEventFactory.onExplosionDetonate(this.level, this, list, f2);
            Vec3 vec3 = new Vec3(this.x, this.y, this.z);

            for (int k2 = 0; k2 < list.size(); ++k2) {
                Entity entity = list.get(k2);
                if (!entity.ignoreExplosion()) {
                    double d12 = Math.sqrt(entity.distanceToSqr(vec3)) / (double) f2;
                    if (d12 <= 1.0D) {
                        double d5 = entity.getX() - this.x;
                        double d7 = (entity instanceof PrimedTnt ? entity.getY() : entity.getEyeY()) - this.y;
                        double d9 = entity.getZ() - this.z;
                        double d13 = Math.sqrt(d5 * d5 + d7 * d7 + d9 * d9);
                        if (d13 != 0.0D) {
                            d5 /= d13;
                            d7 /= d13;
                            d9 /= d13;
                            double d14 = (double) getSeenPercent(vec3, entity);
                            double d10 = (1.0D - d12) * d14;
                            entity.hurt(this.getDamageSource(), (float) ((int) ((d10 * d10 + d10) / 2.0D * 7.0D * (double) f2 + 1.0D)));
//                            entity.hurt(this.getDamageSource(), 22F);
                            double d11 = d10;
                            if (entity instanceof LivingEntity) {
                                d11 = ProtectionEnchantment.getExplosionKnockbackAfterDampener((LivingEntity) entity, d10);
                            }

                            entity.setDeltaMovement(entity.getDeltaMovement().add(d5 * d11, d7 * d11, d9 * d11));
                            if (entity instanceof Player) {
                                Player player = (Player) entity;
                                if (!player.isSpectator() && (!player.isCreative() || !player.getAbilities().flying)) {
                                    this.hitPlayers.put(player, new Vec3(d5 * d10, d7 * d10, d9 * d10));
                                }
                            }
                        }
                    }
                }
            }

        }

        /**
         * Does the second part of the explosion (sound, particles, drop spawn)
         */
        @Override
        public void finalizeExplosion(boolean pSpawnParticles) {
            if (this.level.isClientSide) {
                this.level.playLocalSound(this.x, this.y, this.z, SoundEvents.GENERIC_EXPLODE, SoundSource.BLOCKS, 4.0F, (1.0F + (this.level.random.nextFloat() - this.level.random.nextFloat()) * 0.2F) * 0.7F, false);
            }

            boolean flag = this.blockInteraction != Explosion.BlockInteraction.NONE;
            if (pSpawnParticles) {
                if (!(this.radius < 2.0F) && flag) {
                    this.level.addParticle(ParticleTypes.EXPLOSION_EMITTER, this.x, this.y, this.z, 1.0D, 0.0D, 0.0D);
                } else {
                    this.level.addParticle(ParticleTypes.EXPLOSION, this.x, this.y, this.z, 1.0D, 0.0D, 0.0D);
                }
            }

            if (flag) {
                ObjectArrayList<Pair<ItemStack, BlockPos>> objectarraylist = new ObjectArrayList<>();
                Collections.shuffle(this.toBlow, this.level.random);

                for (BlockPos blockpos : this.toBlow) {
                    BlockState blockstate = this.level.getBlockState(blockpos);
                    Block block = blockstate.getBlock();
                    if (!blockstate.isAir()) {
                        BlockPos blockpos1 = blockpos.immutable();
                        this.level.getProfiler().push("explosion_blocks");
                        if (blockstate.canDropFromExplosion(this.level, blockpos, this) && this.level instanceof ServerLevel) {
                            BlockEntity blockentity = blockstate.hasBlockEntity() ? this.level.getBlockEntity(blockpos) : null;
                            LootContext.Builder lootcontext$builder = (new LootContext.Builder((ServerLevel) this.level)).
                                    withRandom(this.level.random).withParameter(LootContextParams.ORIGIN, Vec3.atCenterOf(blockpos)).
                                    withParameter(LootContextParams.TOOL, ItemStack.EMPTY).
                                    withOptionalParameter(LootContextParams.BLOCK_ENTITY, blockentity).
                                    withOptionalParameter(LootContextParams.THIS_ENTITY, this.source);
                            if (this.blockInteraction == Explosion.BlockInteraction.DESTROY) {
                                lootcontext$builder.withParameter(LootContextParams.EXPLOSION_RADIUS, this.radius);
                            }

                            blockstate.getDrops(lootcontext$builder).forEach((p_46074_) -> {
                                addBlockDrops(objectarraylist, p_46074_, blockpos1);
                            });
                        }

                        blockstate.onBlockExploded(this.level, blockpos, this);
                        this.level.getProfiler().pop();
                    }
                }

                for (Pair<ItemStack, BlockPos> pair : objectarraylist) {
                    Block.popResource(this.level, pair.getSecond(), pair.getFirst());
                }
            }

            if (this.fire) {
                for (BlockPos blockpos2 : this.toBlow) {
                    if (this.random.nextInt(3) == 0 && this.level.getBlockState(blockpos2).isAir() && this.level.getBlockState(blockpos2.below()).isSolidRender(this.level, blockpos2.below())) {
                        this.level.setBlockAndUpdate(blockpos2, BaseFireBlock.getState(this.level, blockpos2));
                    }
                }
            }

        }

        public void nightFuryFire(Level level) {
            for (BlockPos blockpos2 : getToBlow()) {
                if (level.getRandom().nextInt(3) == 0 && level.getBlockState(blockpos2).isAir() && level.getBlockState(blockpos2.below()).isSolidRender(level, blockpos2.below())) {
                    level.setBlockAndUpdate(blockpos2, DragonSoulFire.getState(level, blockpos2));
                }
            }
        }
    }
}
